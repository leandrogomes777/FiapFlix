// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Context;

namespace MovieAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200924172606_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MovieAPI.Model.Genres", b =>
                {
                    b.Property<long>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1L,
                            Genre = "Adventure"
                        },
                        new
                        {
                            GenreId = 2L,
                            Genre = "Animation"
                        },
                        new
                        {
                            GenreId = 3L,
                            Genre = "Children"
                        },
                        new
                        {
                            GenreId = 4L,
                            Genre = "Comedy"
                        },
                        new
                        {
                            GenreId = 5L,
                            Genre = "Fantasy"
                        },
                        new
                        {
                            GenreId = 6L,
                            Genre = "Romance"
                        },
                        new
                        {
                            GenreId = 7L,
                            Genre = "Drama"
                        },
                        new
                        {
                            GenreId = 8L,
                            Genre = "Action"
                        },
                        new
                        {
                            GenreId = 9L,
                            Genre = "Crime"
                        },
                        new
                        {
                            GenreId = 10L,
                            Genre = "Thriller"
                        },
                        new
                        {
                            GenreId = 11L,
                            Genre = "Horror"
                        },
                        new
                        {
                            GenreId = 12L,
                            Genre = "Mystery"
                        },
                        new
                        {
                            GenreId = 13L,
                            Genre = "Sci-Fi"
                        },
                        new
                        {
                            GenreId = 14L,
                            Genre = "War"
                        },
                        new
                        {
                            GenreId = 15L,
                            Genre = "Musical"
                        },
                        new
                        {
                            GenreId = 16L,
                            Genre = "Documentary"
                        },
                        new
                        {
                            GenreId = 17L,
                            Genre = "IMAX"
                        },
                        new
                        {
                            GenreId = 18L,
                            Genre = "Western"
                        },
                        new
                        {
                            GenreId = 19L,
                            Genre = "Film-Noir"
                        },
                        new
                        {
                            GenreId = 20L,
                            Genre = "(no genres listed)"
                        });
                });

            modelBuilder.Entity("MovieAPI.Model.MovieGenres", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            MovieId = 1L,
                            GenreId = 1L
                        },
                        new
                        {
                            MovieId = 1L,
                            GenreId = 2L
                        },
                        new
                        {
                            MovieId = 1L,
                            GenreId = 3L
                        },
                        new
                        {
                            MovieId = 1L,
                            GenreId = 4L
                        },
                        new
                        {
                            MovieId = 1L,
                            GenreId = 5L
                        },
                        new
                        {
                            MovieId = 2L,
                            GenreId = 1L
                        },
                        new
                        {
                            MovieId = 2L,
                            GenreId = 3L
                        },
                        new
                        {
                            MovieId = 2L,
                            GenreId = 5L
                        },
                        new
                        {
                            MovieId = 3L,
                            GenreId = 4L
                        },
                        new
                        {
                            MovieId = 3L,
                            GenreId = 6L
                        },
                        new
                        {
                            MovieId = 4L,
                            GenreId = 4L
                        },
                        new
                        {
                            MovieId = 4L,
                            GenreId = 7L
                        },
                        new
                        {
                            MovieId = 4L,
                            GenreId = 6L
                        },
                        new
                        {
                            MovieId = 5L,
                            GenreId = 4L
                        },
                        new
                        {
                            MovieId = 6L,
                            GenreId = 8L
                        },
                        new
                        {
                            MovieId = 6L,
                            GenreId = 9L
                        },
                        new
                        {
                            MovieId = 6L,
                            GenreId = 10L
                        },
                        new
                        {
                            MovieId = 7L,
                            GenreId = 4L
                        },
                        new
                        {
                            MovieId = 7L,
                            GenreId = 6L
                        },
                        new
                        {
                            MovieId = 8L,
                            GenreId = 1L
                        },
                        new
                        {
                            MovieId = 8L,
                            GenreId = 3L
                        },
                        new
                        {
                            MovieId = 9L,
                            GenreId = 8L
                        },
                        new
                        {
                            MovieId = 10L,
                            GenreId = 8L
                        },
                        new
                        {
                            MovieId = 10L,
                            GenreId = 1L
                        },
                        new
                        {
                            MovieId = 10L,
                            GenreId = 10L
                        });
                });

            modelBuilder.Entity("MovieAPI.Model.Movies", b =>
                {
                    b.Property<long>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1L,
                            Name = "Toy Story (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 2L,
                            Name = "Jumanji (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 3L,
                            Name = "Grumpier Old Men (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 4L,
                            Name = "Waiting to Exhale (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 5L,
                            Name = "Father of the Bride Part II (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 6L,
                            Name = "Heat (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 7L,
                            Name = "Sabrina (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 8L,
                            Name = "Tom and Huck (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 9L,
                            Name = "Sudden Death (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MovieId = 10L,
                            Name = "GoldenEye (1995)",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.MovieDetail", b =>
                {
                    b.Property<long>("MovieDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MovieDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<string>("PosterImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieDetailId");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("MovieDetail");
                });

            modelBuilder.Entity("MovieAPI.Model.MovieGenres", b =>
                {
                    b.HasOne("MovieAPI.Model.Genres", "Genre")
                        .WithMany("MoviesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAPI.Model.Movies", "Movie")
                        .WithMany("MoviesGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieAPI.Models.MovieDetail", b =>
                {
                    b.HasOne("MovieAPI.Model.Movies", "Movies")
                        .WithOne("MovieDetail")
                        .HasForeignKey("MovieAPI.Models.MovieDetail", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
